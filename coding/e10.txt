e10.txt

Hash 

1.old hash syntax:   old_syntax_hash = {:name => 'bob'} => {:name=>'bob'}

2.new hash syntax:   new_hash = {name: 'bob'}  => {:name=>'bob'}

3.Add on to an existing Hash :: 
person = { height: '6 ft', weight: '160 lbs' } => {:height=>'6 ft', :weight=>'160 lbs'}
person[:hair] = 'brown'
person => {:height=>'6 ft', :weight=>'160 lbs', :hair=>'brown'}
person[:age] = 62 => 62
person => {:height=>'6 ft', :weight=>'160 lbs', :hair=>'brown', :age=>62}

4.Remove from a hash :  person.delete(:age)   => 62

5.How do you retrieve a piece of information from a hash?
 person[:weight]  => "160 lbs"

6.How to merge two hashes together :  
person.merge!(new_hash)=> {:height=>'6 ft', :weight=>'160 lbs', :hair=>'brown', :name=>'bob'}

7.Iterating Over Hashes :
person = {name: 'bob', height: '6 ft', weight: '160 lbs', hair: 'brown'}
person.each do |key, value|
  puts "Bob's #{key} is #{value}"
end

8.Common hash methods :

A. key? 
The key? method allows you to check if a hash contains a specific key. It returns a boolean value.    name_and_age = { "Bob" => 42, "Steve" => 31, "Joe" => 19} => {"Bob"=>42, "Steve"=>31, "Joe"=>19}
name_and_age.key?("Steve") => true
name_and_age.key?("Larry") => false


B. select
The select method allows you to pass a block and will return any key-value pairs that evaluate to true when passed to the block

name_and_age.select { |k,v| k == "Bob" }  => {"Bob"=>42}
name_and_age.select { |k,v| (k == "Bob") || (v == 19) } => {"Bob"=>42, "Joe"=>19}

C. fetch
The fetch method allows you to pass a given key and it will return the value for that key if it exists. You can also specify an option for return if that key is not present. Take a look at the Ruby docs here to see what else is possible.

 name_and_age.fetch("Steve")
=> 31

 name_and_age.fetch("Larry")
=> KeyError: key not found: "Larry"
     from (irb):32:in `fetch'
     from (irb):32
     from /usr/local/rvm/rubies/ruby-2.5.3/bin/irb:16:in `<main>'

name_and_age.fetch("Larry", "Larry isn't in this hash")
=> "Larry isn't in this hash"

D. to_a
The to_a method returns an array version of your hash when called. Let's see it in action. It doesn't modify the hash permanently though.

Copy Code
irb :009 > name_and_age.to_a
=> [["Bob", 42], ["Steve", 31], ["Joe", 19]]
irb :010 > name_and_age
=> {"Bob"=>42, "Steve"=>31, "Joe"=>19}

E. keys and values
Finally, if you want to just retrieve all the keys or all the values out of a hash, you can do so very easily:

Copy Code
irb :0011 > name_and_age.keys
=> ["Bob", "Steve", "Joe"]
irb :0012 > name_and_age.values
=> [42, 31, 19]
Notice that the returned values are in array format. Because it's returning an array, you can do interesting things like printing out all the keys in a hash: name_and_age.keys.each { |k| puts k }.



............................................................................................

Exercises based on Hash ::

Problem 01: 

Given a hash of family members, with keys as the title and an array of names as the values, use Ruby's built-in select method to gather only siblings' names into a new array.

family = {  uncles: ["bob", "joe", "steve"],
            sisters: ["jane", "jill", "beth"],
            brothers: ["frank","rob","david"],
            aunts: ["mary","sally","susan"]
          }

Solution ::

immediate_family = family.select do |k, v|
  k == :sisters || k == :brothers
end

arr = immediate_family.values.flatten

p arr

.............................................................

Problem 02:

Look at Ruby's merge method. Notice that it has two versions. What is the difference between merge and merge!? Write a program that uses both and illustrate the differences.

The difference is merge! modifies permanently, while merge does not.

Copy Code
cat = {name: "whiskers"}
weight = {weight: "10 lbs"}
puts cat.merge(weight)
puts cat                  # => {:name=>"whiskers"}
puts weight               # => {:weight=>"10 lbs"}
puts cat.merge!(weight)
puts cat                  # => {:name=>"whiskers", :weight=>"10 lbs"}
puts weight               # => {:weight=>"10 lbs"}


.............................................................


Problem 03:

Using some of Ruby's built-in Hash methods, write a program that loops through a hash and prints all of the keys. Then write a program that does the same thing except printing the values. Finally, write a program that prints both.

opposites = {positive: "negative", up: "down", right: "left"}

opposites.each_key { |key| puts key }
opposites.each_value { |value| puts value }
opposites.each { |key, value| puts "The opposite of #{key} is #{value}" }

.............................................................


Problem 04:

Given the following expression, how would you access the name of the person?
person = {name: 'Bob', occupation: 'web developer', hobbies: 'painting'}

person[:name]

.............................................................

Problem 05:

What method could you use to find out if a Hash contains a specific value in it? Write a program that verifies that the value is within the hash.

Solution :

# value?

if opposites.value?("negative")
  puts "Got it!"
else
  puts "Nope!"
end

................................................................

Problem 06 : 

Given the following code...

Copy Code
x = "hi there"
my_hash = {x: "some value"}
my_hash2 = {x => "some value"}
What's the difference between the two hashes that were created?

Solution :: 

The first hash that was created used a symbol x as the key. The second hash used the string value of the x variable as the key.

................................................................

Problem 07 :

If you see this error, what do you suspect is the most likely problem?

Copy Code
NoMethodError: undefined method `keys' for Array


A. We're missing keys in an array variable.
B. There is no method called keys for Array objects.
C. keys is an Array object, but it hasn't been defined yet.
D. There's an array of strings, and we're trying to get the string keys out of the array, but it doesn't exist.

B.There is no method called keys for Array objects.


................................................................




