rails 4 5 6 7 diff.txt :: 
.............................

.............................

Rails 7 Features::

1. Background Jobs 
2. Byebug Change :: byebug - debugger 
3. Association Check :: Check association absence and presence
4. Ruby Version :: Use rvm 2.7.0 or greater
5. Importmap :: node and webpacker is not required use importmap - use importmap-rails gem 
6. Asynchronous Querying ::  load_async(asynchronous query) - Post.load_assync - use multiple queries ::     load_async method
7. Hotwire ::  turbolink and ujs are replaced by turbo and stimulous ::
8. Encrypted Database Layer :: 
9. Assert a Single Record with Sole ::  Call sole or find_sole_by ::
10.Stream Generated Files from Controller Actions ::
11.ZeitWork Mode for Rails 7 
12.Invert Where Method 
13.Comparison Validator
14. Named Variants 
15. Add missing Method 
16. Association Previously Changed Method 
17. Disable partial_inserts as default
18. Active storage pre-defined variants
19. Add tracking of belongs_to association
20. PostgreSQL custom enum types
21. PostgreSQL generated columnsPostgreSQL custom enum types
22. A new #update_attribute! method was added
23. db:prepare can load the schema of an empty database.
24. Specify the parent class of a job with a job generator
25. A new #stub_const method was added.
26. ActiveRecord::ConnectionPool is now Fiber-safe
27. Merged

.......................  .......................  .......................

Rails 6 Features ::

B.Diff bet rails 5 and 6 ::

1.Multiple Databases :: Use multiple databases and switching between multiple databases
2.Bulk :: bulk_insert ,bulk_upsert and update_all
3.Ruby Version :: rvm 2.5.0 or greater
4.Gems Compatibility :: can check all gems compatiable with rails-6
5.Default Bundler :: Webpacker 
6.Parellel Testing :: 
7.Action Mailbox 
8.Action Text 
9.Action Cable Easy Access 

.......................  .......................  .......................


Rails 5 Features :: 
.......................  .......................  .......................

C. Diff bet rails 4 and 5 ::

1. Active Job is here
2. Action Cable is here
3. Use Rails instead of Rake 
4. Rails api only application 
5. Active Record Improvements.
6. Ruby 2.2.1+ support only
7. Advantages of Symbol GC available in Ruby
8. Remove Array allocation if not needed 
9. Active Record Improvements ::
10. Ajax Library :: 
11. Customized URL
12. Render From Anywhere
13. ActionPack Assertions
14. Keyword Arguments
15. Module #prepend
16. Symbol Garbage Collector
...........................


Rails 4 Features :: 
.......................  .......................  .......................

C. Diff bet rails 4 and 3 ::

1.Ruby Version 1.9.3 or higher is required 
2.Gemfile - Uses Gemfile 
3.Threadsafe by default : 
4.No More vendor plugins 
5.New Testing Directories
6.Srong Parameters 
7.Renamed Callbacks
8.Deprecated Dynamic Finders
9.Queuing Systems
10.Live Streaming
11.Cache Digest
12.Turbolinks
13.Routing Concerns

https://www.zapbuild.com/bitsntricks/latest-ruby-rails-4/
https://www.andolasoft.com/blog/what-new-features-you-will-get-in-the-latest-release-of-rails4.html

...........................

.......................  .......................  .......................

Rails 3 Features :: 

Q.Difference Between Rails 2 And Rails 3 ?
Ans: I found 7 major Difference between rails 2 and rails 3 has: New Router Api, New mailer, New Active Record Query interface, Assets pipeline, Security Improvements, Unobtrusive JavaScript (UJS) , Dependency management with bundler.


1. Introduction to Bundler (New Way to manage em dependencies
2. Gemfile and Gemfile.lock - where all your gem dependencies lies ,instead of enviornment.rb 
3. A new.rb file in config/folder named as application.rb, (which has previously enviornment.rb had)
4. Change in SQL Structure : Model.where(:activated=>true)
5. All the mailer Script will now be in the app/mailers folders,earlier we kept inside the app/models.
6. Rails3-UJS Support .for links and forms to work as AJAX, instead of writing complex line of code ,we write 
:remote => true 
7. HTML 5 Support 
8. Change in the model based validation syntax : 
valdiates:name,presence => true 
9. Ability to install 

.......................  .......................  .......................


Rails 7 Features ::

Rails 7 Features ::
Link :: https://inside.caratlane.com/fascinating-features-of-rails-7-9714a500f89e
        https://gist.github.com/zakariaf/534ff8dfc3a807779133dc078114b969
        https://gist.github.com/zakariaf/534ff8dfc3a807779133dc078114b969#add-missing-method
        https://manny.codes/this-week-in-rails-wrapped-an-overview-of-rails-7-1-features-part-i/#02-adding-autoload-paths-to-load_path-disabled
        https://www.bluebash.co/blog/upcoming-rails-7-features/


1.

.......................  .......................  .......................

Rails 7 Features ::

A. Diff bet rails 6 and 7 ::

1. BackgroundJobs :: Infinite Runtime with Background jobs :: 

Now in Rails 7 Passing the :unlimited flag as the attempts parameter on retry_on which allows for a job to retry continuously until it succeeds.Before this it was not possible . 

Ex ::  

class MyJob < ActiveJob::Base
  retry_on(AlwaysRetryException, attempts: :unlimited)
 
  def perform
    raise "KABOOM"
  end
end

...............


2. Byebug Change :: byebug - debugger 
................

3. Association Check :: Check association absence and presence :: Add Association Method ::

Ex1:: 

# Before:
account.users.joins(:contact).where.not(contact_id: nil)
 
# After:
account.users.where.associated(:contact)

....
Ex2:: 

Before
User.where.not(contact_id: nil)

After
User.where.associated(:contact)


...............

4. Ruby Version :: Use rvm 2.7.0 or greater


...............

5. Importmap :: node and webpacker is not required use importmap - use importmap-rails gem ::

JavaScript in Rails 7 will no longer require NodeJS or Webpack. And you can still use npm packages.

importmaps-rails gem::

A. Install date-fns 

$ ./bin/importmap pin date-fns
This will add a line in config/importmap.rb like:

pin "date-fns", to: "https://ga.jspm.io/npm:date-fns@2.27.0/esm/index.js"

In your JavaScript code, you can continue using everything as you used to:
import { formatDistance, subDays } from "date-fns";
 
formatDistance(subDays(new Date(), 3), new Date(), { addSuffix: true });
//=> "3 days ago"

...............

6. Asynchronous Querying ::  load_async(asynchronous query) - Post.load_assync - use multiple queries ::     load_async method 

There is now a load_async method that you can use when querying data to fetch results in the background. This is especially important when you need to load several un-related queries from a controller action. You can run:

Ex :: 

def PostsController
  def index
    @posts = Post.load_async
    @categories = Category.load_async
  end
end

This will fire both queries in the background at the same time. So, if each query takes 200ms, the total time spent fetching the data is ~200ms instead of 400ms, if they are fetched serially.

...............

7. Hotwire ::  turbolink and ujs are replaced by turbo and stimulous ::

There are 3 main connections for hotwire ::
1. Turbo
2. Stimulus
3. Strada

...............

8. Encrypted Database Layer :: 

Encryption at Database Layer
Rails 7 allows marking certain database fields as encrypted using the encrypts method on ActiveRecord::Base. This means that after an initial setup, you can write code like this:

class Message < ApplicationRecord
  encrypts :text
end
You can continue using the encrypted attributes like you would any other attribute. Rails 7 will encrypt and decrypt it automatically between the database and your application.

But this comes with a slight quirk: you cannot query the database by that field unless you pass a deterministic: true option to the encrypts method. The deterministic mode is less secure than the default non-deterministic mode, so only use it for attributes you absolutely need to query.


...............

9. Assert a Single Record with Sole ::  Call sole or find_sole_by ::

When querying records, you can now call sole or find_sole_by (instead of first or find_by) when you want to assert that the query should only match a single record.

Product.where(["price = %?", price]).sole
# => ActiveRecord::RecordNotFound      (if no Product with given price)
# => #<Product ...>                    (if one Product with given price)
# => ActiveRecord::SoleRecordExceeded  (if more than one Product with given price)
 
user.api_keys.find_sole_by(key: key)
# as above

...............

10.Stream Generated Files from Controller Actions ::

Rail on Ruby 7 allows you to streamline a file generated on the fly using send_stream inside controller action.

send_stream(filename: "subscribers.csv") do |stream|
stream.write "email_address,updated_at\n"
@subscribers.find_each do |subscriber|
stream.write "#{subscriber.email_address},#{subscriber.updated_at}\n"
end
end
This provides developers with an immediate/ partial response to know that something is happening, which will benefit when deployed on Heroku.

...............

11.ZeitWork Mode for Rails 7 ::

All Rail 7 applications will now run in the Zeitwerk mode. The management has ensured that this transformation will be smooth for the developers. Zeitwerk is a code loader for Ruby on Rails. The developers can easily load your project's module and classes using this.

This is launched so that any gem dependency, project, application etc., can have its loader. Each loader has its inflector, configuration, and logger. Zeitwerk has all features of the Classic mode; the only difference is that it provides a better strategy for loading elements.

...............


12.Invert Where Method :: 

Invert_where method to the ApplicationRecord used to invert all the defined scope conditions.

Before

class User < ApplicationRecord
    scope :verified, -> { where(email_verified: true, phone_verified: 
true) }
    scope :unverified, -> { where.not(email_verified: true,
 phone_verified:true) }

    scope :with_verified_email, -> { where(email_verified: true) }
    scope :with_unverified_email, -> { where.not(email_verified: true) }
end
After Rails 7 :

class User < ApplicationRecord
    scope :verified, -> { where(email_verified: true, phone_verified: true)
 }

    scope :with_verified_email, -> { where(email_verified: true) }
end
Instead of creating unverified and with_unverified_email scopes with negating conditions, we can just chain invert_where to verified and with_verified_email scopes.



...............


13.Comparison Validator ::

The comparison validator validates the state of the object before it is going to store in the database. Considering all its presence, uniqueness, numerical properties, and validity of the particular data it has been checked properly.

class Post < ApplicationRecord
    validates :end_date, date: { after: Proc.new { Date.today } }
    validates :end_date, date: { after: :start_date }
end
If we want to validate the end_date, we have to use the custom_validator or otherwise we can use gem_validator.

After Rails 7 onwards :

class Post < ApplicationRecord
    validates_comparison_of :end_date, greater_than: -> { Date.today }
    validates :end_date, greater_than: :start_date
end


...............


14. Named Variants :: 

You can name variants using ActiveStorage in the latest Ruby on Rails 7.

class User < ApplicationRecord
    has_one_attached :avatar do |attachable|
        attachable.variant :thumb, resize: "100x100"
    end
end

#Call avatar.variant(:thumb) to get a thumb variant of an avatar:
<%= image_tag user.avatar.variant(:thumb) %>

...............

15. Add missing Method 

It returns the list of all records that don't have an association. opposite of associated

Before
User.where(contact_id: nil)

After
User.where.missing(:contact)

...............

16. Association Previously Changed Method ::

The association_previously_changed? method tells if the previous save updated the association to reference a different associated object.

> event.organizer
=> #<Organizer id: 1, name: "Organization 1">

> event.organizer = Organizer.second
=> #<Organizer id: 2, name: "Organization 2">

> event.organizer_changed?
=> true

> event.organizer_previously_changed?
=> false

> event.save!
=> true

> event.organizer_changed?
=> false

> event.organizer_previously_changed?
=> true

...............

17. Disable partial_inserts as default :: 

# == Schema Information
#
# Table name: posts
#
#  id                     :bigint
#  title                  :string
#  description            :text
#  created_at             :datetime
#  updated_at             :datetime

class Post < ApplicationRecord
end
Before
It's enabled as default

Rails.configuration.active_record.partial_inserts => true

The INSERT command does not include description as we are just passing title to the Post.new command

> Post.new(title: 'Rails 7').save

Post Create (1.7ms)  INSERT INTO "posts" ("title", "created_at", "updated_at") VALUES (?, ?, ?)  [["title", "Rails 7"], ["created_at", "2021-12-25 20:31:01.420712"], ["updated_at", "2021-12-25 20:31:01.420712"]]
After
It's disabled as default

Rails.configuration.active_record.partial_inserts => false

The INSERT command includes description too, even when we don't pass description to the Post.new command

> Post.new(title: 'Rails 7').save

Post Create (1.7ms)  INSERT INTO "posts" ("title", "description", "created_at", "updated_at") VALUES (?, ?, ?)  [["title", "Rails 7"], ["description", ""], ["created_at", "2021-12-25 20:31:01.420712"], ["updated_at", "2021-12-25 20:31:01.420712"]]
More details: https://blog.kiprosh.com/rails-7-introduces-partial-inserts-config-for-activerecord/

............

18. Disable partial_inserts as default :: 

Before
class Puppy < ApplicationRecord
  has_one_attached :photo
end
<%= image_tag puppy.photo.variant(resize_to_fill: [250, 250]) %>

After
class Puppy < ApplicationRecord
  has_one_attached :photo do |attachable|
    attachable.variant :thumb, resize: "100x100"
    attachable.variant :medium, resize: "300x300", monochrome: true
  end
end
<%= image_tag puppy.photo.variant(:thumb) %>

............


19. Add tracking of belongs_to association ::

class Event
  belongs_to :organizer
end

class Organizer
  has_many :events
end


............

22. A new #update_attribute! method was added ::

Rails added a new ActiveRecord::Persistence#update_attribute!method. This method is similar to update_attribute, but calls save! instead of save.

class Topic < ActiveRecord::Base
  before_save :check_title

  def check_title
    throw(:abort) if title == "abort"
  end
end

topic = Topic.create(title: "Test Title")
# => #<Topic title: "Test Title">

topic.update_attribute!(:title, "Another Title")
# => #<Topic title: "Another Title">

topic.update_attribute!(:title, "abort")
# raises ActiveRecord::RecordNotSaved

ActiveRecord::Persistence#update_attribute! raises ActiveRecord::ActiveRecordError if an attribute is marked as readonly.

............

23. db:prepare can load the schema of an empty database.
Previously, if a database existed but had not been populated with tables, db:prepare would run all migrations. Now db:prepare will load the schema when an uninitialized database exists and dump schema after migrations.

............

24. Specify the parent class of a job with a job generator.
Rails added a --parent option to the job generator to specify the parent class of a job. There’s now a superclass option in the job generator.

It’s possible now to do:

bin/rails g job process_payment --parent=payment_job
to get:

class ProcessPaymentJob < PaymentJob
  # your stuff here
end

............

 25. A new #stub_const method was added ::

 A new #stub_const method was added to easily change the value of a constant for the duration of a block, silencing warnings. The implementation is not thread-safe if you have parallel testing enabled though.

# World::List::Import::LARGE_IMPORT_THRESHOLD = 5000

stub_const(World::List::Import, :LARGE_IMPORT_THRESHOLD, 1) do
  assert_equal 1, World::List::Import::LARGE_IMPORT_THRESHOLD
end

assert_equal 5000, World::List::Import::LARGE_IMPORT_THRESHOLD = 5000
In the example above, by using this method instead of setting World::List::Import::LARGE_IMPORT_THRESHOLD to 5000, we can prevent warnings from being thrown and ensure that the original value is restored after the test has finished.

Take note, however, that stubbing a constant can have unintended consequences when used in a multithreaded environment. If multiple threads depend on the same constant and each thread attempts to stub the constant, it can lead to conflicting stubs and unpredictable behaviour. To avoid this issue, it is important to carefully consider the impact of stubbing constants in concurrent threads, such as when running separate test suites in parallel.

..............
26. ActiveRecord::ConnectionPool is now Fiber-safe ::

Rails made ActiveRecord::ConnectionPool Fiber-safe. Rails has a lot of thread-centric code and does I/O with databases with threads inherently, this pull request makes it possible to switch how the connection pool is interacted with. For instance, if you use a fiber-based job processor or server like falcon, you should set config.active_support.isolation_level to :fiber, in which case multiple fibers in the same thread will be used to manage connections.

..............

27. Merged:- The default skeleton of Rails shouldn't require the whole JavaScript toolchain with Webpack by default. If needed, we can easily go from Hotwire to Webpack with an import mapped Hotwire. The webpack option will still be available for those who know they'll need the full JS chain (like when using React). 




.......................  .......................  .......................

Rails 6 Features ::

B.Diff bet rails 5 and 6 ::

1.Multiple Databases :: Use multiple databases and switching between multiple databases
2.Bulk :: bulk_insert ,bulk_upsert and update_all
3.Ruby Version :: rvm 2.5.0 or greater
4.Gems Compatibility :: can check all gems compatiable with rails-6
5.Default Bundler :: Webpacker 
6.Parellel Testing :: 
7.Action Mailbox 
8.Action Text 
9.Action Cable Easy Access 








.......................

1. 

Multiple Databases :: Use multiple databases and switching between multiple databases ::
To meet this purpose, Rails 6 provides an API for multiple databases support, which is going to enable you do it without digging deep in Active Record.

How to Connect to multiple databases ::
1. Add the extra databases to your database.yml config file like this:
2. You can then specify at the model-level which database(s) you want to use:
3.And then it’s just one line of code to temporarily switch between databases inside a block!
.........



1.Add the extra databases to your database.yml config file like this:

development:
  main:
    <<: *defaults
    database: main_db
  slow_queries:
    <<: *defaults
    database: readonly_main_db

2. You can then specify at the model-level which database(s) you want to use:

class User < ApplicationRecord
  connects_to database: { writing: main, reading: slow_queries }
end

3. User.connected_to(role: :reading) do
  # Do something that you know will take a long time
end

.......................

2.Bulk :: bulk_insert ,bulk_upsert and update_all

1. insert_all, similar to update_all.
2. upsert_all. This option allows users to do upsert activities in their tasks. 

.......................

3.Ruby Version :: rvm 2.5.0 or greater

.......................

4. 
RailsBump
Check your Ruby gems for compatibility with all major Rails versions.

.......................

5.Default Bundler :: Webpacker ::

Webpacker is a gem which allows easy integration of JavaScript pre-processor and bundler with Rails. It provides various helpers and configuration options to use webpack easily with Rails.

The app/javascript directory contains,

app/javascript:
  ├── channels:
  │   # action cable channel files here
  │   └── consumer.js
  │   └── index.js
  ├── packs:
  │   # only webpack entry files here
  │   └── application.js

  How to use Webpacker with packs?

   the app/javascript/packs/application.js pack will be included by default in app/views/layouts/application.html.erb layout as follows,

<%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>

How to configure Webpacker?
The configuration information for Webpacker lies in config/webpacker.yml. We can change options like source path, packs path and many more from the configuration file.

Keeping the process similar to the previous assets pipeline, the JavaScript compilation happens along with the request while running the Rails server in development mode.

In production mode rake assets:precompile does the job. The assets:precompile rake task runs webpacker:compile by default to generate webpack compiled assets.

We can also use live reloading and hot module replacement in development mode with the help of binstubs provided by Webpacker. More on that can be found here.

.......................



6. Parellel Testing in Rails :: 

Can Run test cases in parrellel not in series after rails-6 features. takes more advantage of the cpu and its performacne ex- mac book with core 10 cpu base

How to run test cases in parellel ::

1.  It's as easy as adding parallelize to your tests:

class ActiveSupport::TestCase
  parallelize(workers: :number_of_processors)
end

Using this configuration, Rails will automatically spawn worker processes based on the number of processors in your machine. Rails will also create namespaced databases (e.g. database-test-0, database-test-1, etc.) to run your tests against.


2. Sometimes, you may have to perform a specific setup or cleanup for parallel tests. Rails provides two hooks for you to use — 
parallelize_setup and 
parallelize_teardown. 

class ActiveSupport::TestCase
  parallelize_setup do |worker|
    # setup
  end
 
  parallelize_teardown do |worker|
    # cleanup
  end

  3. You can also manually set the number of workers:

  class ActiveSupport::TestCase
  parallelize(workers: 4) # Use 4 worker processes
end
Alternatively, use the PARALLEL_WORKERS environment variable to override an existing configuration:

PARALLEL_WORKERS=4 rails test

4. There is also the option to use threads instead of workers to parallelize your test suite.

class ActiveSupport::TestCase
  parallelize(workers: :number_of_processors, with: :threads)
end
with: :threads is the default option when using JRuby or TruffleRuby. Using threads, in theory, provides slightly better performance. Threads require less overhead than processes, after all. In practice, however, I never found using threads all too useful, and you should be fine just sticking to process-based parallelization for the most part.

.......................



6. Zeitwerk :: 

Zeitwerk, a new and improved, thread-safe code loader for Rails.
Zeitwerk is the latest code loader for Ruby on Rails. It’s a conventional file structure. Moreover, the Zeitwerk loads the project classes and modules on demand by the users. It means the user doesn’t need to write the necessary calls require for their files. It can overcome the limitations that a traditional loader generally has. This can; Autoload code, Eager Load code, Reload code, and can also work with both applications and gems. Thus, it makes it robust to perform better for achieving results. Moreover, this is built with the intention to eliminate all known use cases of a classic loader.

.......................


7.Action Mailbox ::
Link ::  

Action Mailbox routes incoming emails to controller-like mailboxes for processing in Rails. It supports all major platforms or ingresses like Amazon SES, Mailgun, Mandrill, Postmark, and SendGrid. You can also handle inbound mails directly via the built-in Exim, Postfix, and Qmail ingresses.

Installation of ActionMailBox ::

0.   $ rails new action_mailbox -d postgresql
1.   $ gem install rails --pre           ::  should be greater than rvm use 2.6
2.   Create the gemsets file and Add this line in the root directory 
	.ruby-version and .ruby-gemset
3.   Run bellow generator to create mailbox related migration and files ::
	 $ rails action_mailbox:install  ::   it would have created ApplicationMailbox.rb.
4.   $ rails db:migrate +  $ rails webpacker:install (for install assets file) +  
5.   You would need to configure your email service provider to post JSON data to your rails webhook when someone sends email to you.



.......................

8. 

Action Text :: 
Action Text is going to make writing, editing and displaying text in a Rails app 'super easy' or 'take it to the next level'.Action Text includes the Trix editor that handles:
1. formatting,
2. quotes,
3. and adding links and lists to embedded images and galleries.
Active Storage is, again, required for this framework to work properly.

The Trix editor will capture rich-text information (such as bold text, headings, images etc.) and save this data into your desired storage solution, along with saving associated metadata into some new tables (note that this means that ActionText requires you to be using ActiveStorage).


.......................


9.Action Cable Easy Access 

This may be a great feature in Rails 6 update where users can easily test “Action Cables” for different functionalities and at any level. This consists of the following features;
Channels- It maintains the channel’s subscribers to a specific stream.
Connections- This feature tests whether the connections identifiers are properly allotted.
Broadcast- It checks whether the message has been transmitted within other components or not.
On the basis of the above details on updates, we can say that Rails 6 framework helps the users very much. It improves the process of common development tasks faster and easier. This is also very significant for its extensive usage of JavaScript libraries, prototypes, etc. for agile actions. It could be definitely the best solution for the business world in performing certain actions.
It became a power-packed solution for the business needs with the latest updates and there are still upcoming.

.......................


Rails 5 Features :: 
.......................  .......................  .......................

C. Diff bet rails 4 and 5 ::

1. Active Job is here
2. Action Cable is here
3. Use Rails instead of Rake 
4. Rails api only application 
5. Active Record Improvements.
6. Ruby 2.2.1+ support only
7. Advantages of Symbol GC available in Ruby
8. Remove Array allocation if not needed 
9. Active Record Improvements ::
10. Ajax Library :: 
11. Customized URL
12. Render From Anywhere
13. ActionPack Assertions
14. Keyword Arguments
15. Module #prepend
16. Symbol Garbage Collector
...........................




.......................  .......................  .......................

C. Diff bet rails 4 and 5 ::

1. Active Job is here
2. Action Cable is here
3. Use Rails instead of Rake 
4. Rails api only application 
5. Active Record Improvements.
6. Ruby 2.2.1+ support only
7. Advantages of Symbol GC available in Ruby
8. Remove Array allocation if not needed 
Array should not be allocated if not needed. Basically if you are initializing a variable by an empty array and there are conditions below which would add values to array or something then just delay initialization of variable to a array as possible as you can.
var = []
some_object = 54

if some_object == 54
  var << 'found'
end
var = nil
some_object = 54

if some_object == 54
  var ||= []
  var << 'found'
end
Basically we have delayed initialization i.e. allocation until needed.

9. ActiveRecord Improvements ::

With Rails 5 - ActiveRecord::Base#where.or is introduced. Y
Post.where('id = 1').or(Post.where('id = 2'))
# => SELECT * FROM posts WHERE (id = 1) OR (id = 2)

10. Ajax Library :: 

Rails provide you an extensive library of AJAX functions. The associated java scripting required for AJAX gets generated automatically.

11. Customized URL
Search engine friendly URLs can be developed in Rails.

12. Render From Anywhere
Earlier we used gem render_anywhere to render views outside controller. In Rails 5, you can render your views from anywhere.

13. ActionPack Assertions
The assertions assert_template and assigns() are deprecated and moved into its own gem.

14. Keyword Arguments
It supports keyword arguments which helps to reduce memory consumption by Rails application.

15. Module #prepend
It allows you to insert a module in front of the class it was prepended.

16. Symbol Garbage Collector
Passing symbols opens the possibility of several attacks in your system. The symbol garbage collector collects the symbols which prevents your system from several attacks.

................................

Features of Rails 3 :::::::::::::::::::

D. Diff between Rails 2 and Rails 3 :::

.......................................

Q.Difference Between Rails 2 And Rails 3 ?
Ans: I found 7 major Difference between rails 2 and rails 3 has: New Router Api, New mailer, New Active Record Query interface, Assets pipeline, Security Improvements, Unobtrusive JavaScript (UJS) , Dependency management with bundler.


1. Introduction to Bundler (New Way to manage em dependencies
2. Gemfile and Gemfile.lock - where all your gem dependencies lies ,instead of enviornment.rb 
3. A new.rb file in config/folder named as application.rb, (which has previously enviornment.rb had)
4. Change in SQL Structure : Model.where(:activated=>true)
5. All the mailer Script will now be in the app/mailers folders,earlier we kept inside the app/models.
6. Rails3-UJS Support .for links and forms to work as AJAX, instead of writing complex line of code ,we write 
:remote => true 
7. HTML 5 Support 
8. Change in the model based validation syntax : 
valdiates:name,presence => true 
9. Ability to install 


.....................
.....................

Features of rails 4 :: 
Diff between Rails 3 and Rails 4 ::

Rails 4 Features :: 
.......................  .......................  .......................

C. Diff bet rails 4 and 3 ::

1.Ruby Version 1.9.3 or higher is required 
2.Gemfile - Uses Gemfile 
3.Threadsafe by default : 
4.No More vendor plugins 
5.New Testing Directories
6.Srong Parameters 
7.Renamed Callbacks
8.Deprecated Dynamic Finders
9.Queuing Systems
10.Live Streaming
11.Cache Digest
12.Turbolinks
13.Routing Concerns

https://www.zapbuild.com/bitsntricks/latest-ruby-rails-4/
https://www.andolasoft.com/blog/what-new-features-you-will-get-in-the-latest-release-of-rails4.html


1. Ruby Versions

It is essential to note that Rails 4 would require Ruby 1.9.3 or higher, in fact Ruby 2.0.0 is recommended for your Rails 4 apps.

2. ‘Gemfile’

Rails now uses a ‘Gemfile’ in the application root to determine the gems you need for your app to start. This ‘Gemfile’ is processed by the Bundler gem, which then installs all the dependencies. It can also install all the dependencies locally to your app so that it doesn’t depend on the system gems.

Read Also: How to do tagging in Rails with gem ‘Acts_as_taggable_on’?

3. ‘Threadsafe’ by Default

Rails 4 will be thread-safe by default i.e. removing overhead and improving the performance on threaded servers, like thin and puma. You will have to ensure that your application and its dependencies are thread-safe, in other words, avoiding global state e.g. class or global variables.

4. No More vendor/plugins

Rails 4.0 will no longer support loading of plugins from vendor. You must replace any plugins by extracting them to gems and adding them to your ‘Gemfile’. If you choose not to make them gems, you can also move them into a different directory such as lib/my_plugin/* and add an appropriate initializer in config/initializers/my_plugin.rb.

5. New Testing Directories

The biggest change made to the testing of Rails 4 app is not the swapping of the testing framework, rather the testing folder structure. The test folder will now have a structure very similar to RSpec:

controllers:
fixtures
helpers
integration
mailers
models
Developers will no longer have to worry if the test is “functional” or a “unit”. The structure provides a clear separation of where the tests in your application should go.

6. Strong Parameters

In Rails 4, a new pattern has been introduced to secure your models from mass assignment. You can filter the parameters passed to your model in the controller instead of ‘whitelisting’ the attributes in your model using “attr_accessible”.

1
2
3
4
5
class PostController < ApplicationController
 def create
 @post = Post.create(params[:user])
 end
end
You can protect against unexpected input with declarations in the model using “attr_accessible”.

1
attr_accessible :title, :description
In Rails 4, you don’t need to worry about unexpected input attributes in your model anymore.
Strong Parameters gem moves user input into the controller.

01
02
03
04
05
06
07
08
09
10
class PostController < ApplicationController
 def create
 @post = Post.create(post_params)
 end
 
 private
 def post_params
 params.require(:post).permit(:title, :description)
 end
end
The “params hash” in your controller is not a normal hash. It’s actually an instance of ActionController::Parameters, which exposes the “require” and “permit” methods.

The “require” method ensures that the specified key is available in the “params” hash, and raises an ActionController::ParameterMissing exception if the key doesn’t exist.

The “permit” method protects you from unexpected mass assignment.

7. Renamed Callbacks

Action callbacks in controllers are now renamed from *_filter to *_action

Example:

1
2
3
before_filter :before_action
arround_filter :arround_action
after_filter :after_action
All existing *_filter methods will still work with no deprecation warnings. However, It would recommend to replace of *_filter calls to *_action

8. Rails 2 Model.find(:[all|:first:last]) syntax is now deprecated.

9. Deprecated dynamic finders

Rails 4 deprecates all dynamic finder methods (with the exception of find_by and find_by_…). Instead, you’ll use where

1
2
3
4
5
6
find_all_by_... => where(...)
scoped_by_... => where(...)
find_last_by_... => where(...).last
find_or_initialize_by... => where(...).first_or_initialize
find_or_create_by... => where(...).first_or_create
find_or_create_by_...! => where(...).first_or_create!
The deprecated finders gem will be included as a dependency in 4.0 and removed in 4.1. The gem, however, will be around and maintained until 5.0.

10. Queuing system

Rails4 added the support for a queue to run background jobs. The queuing API is very simple. The ActiveSupport::Queue class comes with a push method that accepts any object, as long as that object defines a run method.

Example
Let’s say that you have a job class TestJob that prints the name of an author

1
2
3
4
5
class TestJob
 def run
 puts "I am running!"
 end
end
You can queue a job to print “I am running!” in the background by pushing an instance of that class to Rails.queue:

1
2
Rails.queue.push(TestJob.new)
"I am running!"
The job will run in a background thread and it will not block any of your operations.

11. Live Streaming

Live Streaming is a major new feature in Rails 4. It facilitates you to stream data to the browser. Enabling live streaming requires you to mix in the ActionController::Live class in your controller.

01
02
03
04
05
06
07
08
09
10
11
class MyController < ActionController::Base
 include ActionController::Live
 def stream
 response.headers['Content-Type'] = 'text/event-stream'
 100.times {
 response.stream.write "hello world\n"
 sleep 1
 }
 response.stream.close
 end
end
It will stream the string “hello world” to your client 100 times.

You should take notice of following things

Manually close the stream after you are done streaming in the browser.
Headers must be written first before writing anything to the client.
You will need a concurrent Ruby web server, such as puma.io, Rainbow or Thin. Using the default ‘WEBrick’ server won’t work, since it buffers all the output. Also note that Unicorn won’t work either, since it kills the connection after 30 seconds.
All controllers that include ActionController::Live would be executed in another thread, so make sure your code is thread-safe.
12. Rails 4 and Hstore from Postgres 9.2

ActiveRecord in Rails 4 will now support the PostgreSQL hstore extension. This database extension allows a new data type for a column in PostgreSQL called ‘hstore’ which effectively represents a string-only hash. For most purposes this would be similar to serializing data in a text column, but the fact that this is now a native datatype, it would grant a huge performance boost and the capability to query against it directly. You can now have a hint of a schema-less database available to your application without needing to perform a full upgrade to MongoDB, CouchDB, Riak or other similar schema-less data store.

13. Cache Digests (Russian Doll Caching)

Make it super easy to do Russian Doll-caching through key-based expiration with automatic dependency management of nested templates

14. Turbolinks

Now you can speed-up the client-side with ‘Turbolinks’. It essentially turns your app into a single-page ‘JavaScript’ application in terms of speed, but with none of the developmental drawbacks (except, maybe, compatibility issues with some existing JavaScript packages).

15. Routing Concerns

In Rails 4, routing concerns has been added to the router. The basic idea is to define common sub-resources (like comments) as concerns and include them in other resources/routes.

16. Rails3 code

1
2
3
4
5
6
7
resources :posts do
 resources :comments
end
resources :articles do
 resources :comments
 resources :remarks
end
In rails4 the concern routes will only be included within a resource by passing it to the routing option :concerns. The :concerns option can accept one or more concerns.

1
2
3
4
5
6
7
8
concern :commentable do
 resources :comments
end
concern :remarkable do
 resources :remarks
end
resources :posts, :concerns, :commentable
resources :articles, :concerns =>[:commentable, :remarkable]
Why we should upgrade to rails4?

Rails4 is recommended to be used with Ruby 2.0.0. It stopped supporting Ruby 1.8.x after Rails 3.2. Ruby 1.9.2+ will be supported until Rails 5 is released!

Aware of any other not-so-obvious features? Please post it in the comments below.

