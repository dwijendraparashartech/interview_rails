programs1.txt ::

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


1. Find Maximum occurance items in an array   ::
pets = [1,2,3,4,2,10,2,10,10,10,10]
puts pets.max_by {|i| pets.count(i)}

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

2. Find whether two array elements are match or not (order does not matter) ::
p a = [1,2,3,2,2]
p b = [1,3,2,2,2]
p a.sort == b.sort
# output : true

c = [1,2,3,2,2]
d = [1,3,2,2,1]
puts c.sort == d.sort 
# output : false

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


3.  Find the duplicate items in an array ::
array = [1,2,1,3,5,4,4,5,5]
p array.select{|e| array.count(e)>1}.uniq

OR

def find_duplicates(array)
  duplicates = []
  array.each do |element|
    duplicates << element if array.count(element) > 1
  end
  duplicates.uniq
end

p find_duplicates([1, 2, 3, 1, 5, 6, 7, 8, 5, 2]) #=> [1, 5, 2]

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

4. Write the Routes for below code  for comments and blk_upload ::
  resources :posts do
      member do
        get 'comments'
      end
      collection do
        post 'bulk_upload'
      end
  end

Ans ::
Route for Bulk Upload ::   POST  /posts/bulk_upload
Route for Comments ::      /posts/:id/comments

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


5. use metaprogramming to refactor these methods
def admin?
  role ==  'admin'
end
def marketer?
  role == 'marketer'
end
def sales?
  role == 'sales'
end 

Ans :: try this may be this is right 
ROLE =  ['admin','marketer','sales']
ROLE.each do |user_role|
  define_method #{user_role}" do 
    role == user_role
  end 
end 
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


6. Explain this ruby idiom: a ||= b
Mid 
Top 84 Ruby Interview Questions  Ruby  84  
Answer
Is it a common idiom that strong ruby developers will use all the time.

# a = b when a == false
# otherwise a remains unchanged
a || a = b # (Kudos to Markus Prinz)
a = 1
b = 2
a ||= b #=> a = 1
a = nil
b = 2
a ||= b #=> a = 2
a = false
b = 2
a ||= b #=> a = 2

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


7. How to use sql db or mysql db without defining it in the database.yml?

You can use ActiveRecord anywhere
require “rubygems”
require “active_record”
ActiveRecord::Base.establish_connection({
               :adapter=> ‘postgresql’, :user=>’foo’, :password=> ‘abc’, :database=>’whatever’})

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


8. Ques Type ::  Find the highest value in an array of hashes in Ruby
Method ::  You can use max_bymethod
Link ::  https://stackoverflow.com/questions/39581381/

find users where the score is more than 100
array = [
  { name: 'Dan', score: 110 },
  { name: 'Mike', score: 57 },
  { name: 'Jill', score: 120 }
]

Ans ::
array.max_by{|k| k[:score] }

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

9. Use below methods with proper arguments ?
# use below methods with proper arguments

def func1(*input)
  puts input
end

def func2(**input)
  puts input
end

# for example
def math(x, y)
end
math(2,3)

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


10. write rspec. if poduct count is 0 display message "Out of stock"




|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


11. ajax call to list post comments with controller, view, js code

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

12. Find out the sum of first part of strings of an array ::

p ["5 Apple", "5 Orange", "15 Grapes"].map(&:to_i).sum

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

13. How to Create and access the arrays of hashes --
p hash_arr = [{"a"=>'vvvv',"b"=>'xxxx'},{"c"=>"cccccc","d"=>"dddd"}]
p hash_arr[1]["c"]

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

14. Iterate over array of hashes :: 
hash_arr = [{name:'Amu',occupation:'Web Developer'},{name:'Sumit',occupation:'HR'}]
hash_arr.each do |hash|
  puts 'values in the hash'
  hash.each do |key,value|
    puts (key.to_s+':'+value.to_s)
end
end

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


15. How to Iterate over normal hash :: 
h = { "first_name" => "John", "last_name" => "Doe" }
h.each do |key, value|
    puts "#{key} = #{value}"
end

# => first_name = John
#    last_name = Doe
....
h = { "first_name" => "John", "last_name" => "Doe" }
h.each_key do |key|
  puts key
end

# => first_name
#    last_name
....
h = { "first_name" => "John", "last_name" => "Doe" }
h.each_value do |value|
    puts value
end

# => John
#    Doe

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

16. Give an Example to Find out the even and odd numbers in an array   ::

program for even numbers in an array using normal method  :: 


even_numbers = []
[1,2,3,4,5].each do |n|
    if n %2 == 0 
        even_numbers << n 
    end 
end 
puts even_numbers


program for odd numbers in an array using normal method  :: 

odd_numbers = []
[1,2,3,4,5].each do |n|
    if n %2 != 0 
        odd_numbers << n 
    end 
end 
puts odd_numbers



program for even numbers in an array using select method  :: 

puts [1,2,3,4,5].select{|n| n%2 == 0}

program for odd numbers in an array using select method   :: 

puts [1,2,3,4,5].select{|n| n%2 != 0}

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

17. Given:

x = “hello”

Explain the difference between:

x += " world" and

x.concat " world"

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

18. 

What’s the following program going to print?
x = 1
class MyClass
  y = 2
  def foo
     z = 4
     y ||= 0
     puts z + y
  end
  define_method :bar do |x|
     z = 5
     y ||= 0
     puts z + y + x
  end
end
my_class = MyClass.new
my_class.foo
my_class.bar(10)
my_class.bar

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


19. 

Implement a class macro :benchmark that can be used to print the time an instance method takes to execute (advanced).
class Foo
  def bar
     ...
  end
 
  def qux
     ...
  end
  benchmark :bar, :qux
end
foo = Foo.new
foo.bar
# => bar took 0.12 ms
foo.qux
# => qux took 1.15 ms

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

20.  

What will be the values of:
var1 = A.a(0)
var2 = A.a(2)

Answer- var1 will be equal to nil
var2 will be equal to 4
Understand: * A conditional statement in Ruby is an expression that returns nil if the conditional is false. * Ruby methods return the last expression in the method body.

In this example:

A.a(0) returns nil for unsuccessful conditional
A.a(2) returns the square of 2, i.e 4

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

21.

What is the value of the variable upcased in the below piece of code?

upcased = ["one", "two", "three"].map {|n| puts n.upcase }

Answer- upcase = [nil, nil, nil]

Let’s take a look at puts as below:
﻿
>> puts "Hi"
Hi
=> nil


Note the nil at the end: that’s the return value from puts. After all, puts is a method, so it has to return something. As it happens, it always returns nil. The printing out of the string is an action the method performs.

Similarly, evaluating the code in question we can understand that while it’s a common learner mistake to expect the result to be ["ONE", "TWO", "THREE"]. In fact, it’s [nil, nil, nil]. Each time through the block, the block evaluates to the return value of puts to be nil.

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

22.

What will be the value of:

defined? foo
defined? bar

Answer-

foo has been at least read by the interpreter, therefore it is defined and assigned a nil value. However, since bar has never been written, it was never defined in the first place.

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


23.

Predict the output of the code below. Explain your answer?
﻿
-> (s) {p s} [“I’m a Proc”]
->  ::: This is the stabby proc
s :: this is the parameter we pass
{p s} p - puts , s - s.inspect 
["I'm a Proc"] - 
Result - Print I am the proc to console 

Answer- This question highlights the syntactical elegance of Ruby. A seasoned coder can perform a lot with a single line of Ruby code. The -> operator, or “stabby proc” as it is often called, is a way to create a proc that is also a lambda, or nameless function. This proc takes the parameter s and executes the block {p s}, which is shorthand for puts(s.inspect) before passing the string “I’m a Proc” using the square bracket syntax in place of the typical “call” method. The result is an elegant single line of code that prints the string “I’m a Proc” to the console.

87) The .upcase and .capitalize method are used for capitalizing the whole string.
a) True
b) False

Answer- B
Explanation: The .capitalize method doesn’t change the whole string to uppercase, it just capitalizes the first letter.

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


24. 

Find and fix the bug within the code below?

Answer- Normally if Ruby encounters an identifier, and the identifier does not reference a defined local variable, Ruby will try to call a method with the given name. However, when Ruby encounters address = a within the initialize method, it treats address = a as a local variable initialization and fails to invoke the setter. This occurs when Ruby encounters an identifier beginning with a lowercase character or underscore on the left-hand side of an assignment operator. The solution is to clarify that we want to call the writer method address = by prepending address with the self keyword. The initialize method has been reproduced below:

def initialize(a)
  self.address = a
end

Alternatively, you could also fix the bug by directly assigning the value to the instance variable within the initialize method like so:

﻿
def initialize(a)
  @address = clean(a)
end

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


25.  

Explain the difference between:

x += " world"
and

x.concat " world"
Answer-

The += operator re-initializes the variable with a new value, so a += b is equivalent to a = a + b.

Therefore, while it may seem that += is mutating the value, it’s actually creating a new object and pointing the the old variable to that new object.

This is perhaps easier to understand if written as follows:

(Examining the object id of foo and foo2 will also demonstrate that new objects are being created.)

The difference has implications for performance and also has different mutation behavior than one might expect.

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

26. 

What will be the result of each of the following lines of code?

Answer-

The first three lines of code will all print out 10, as expected.

The next two lines of code will both print out 3, as expected.

However, the last line of code (i.e., sum (1,2)) will result in the following:

Syntax:

The problem is the space between the method name and the open parenthesis. Because of the space, the Ruby parser thinks that (1, 2) is an expression that represents a single argument, but (1, 2) is not a valid Ruby expression, hence the error.

Note that the problem does not occur with single argument methods (as shown with our timesTwo method above), since the single value is a valid expression (e.g., (5) is a valid expression which simply evaluates to 5).


|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


27. 

Which of the expressions listed below will result in “false”?

true  ? “true” : “false”  ﻿
false ? “true” : “false”  ﻿
nil ? “true” : “false”  ﻿
1 ? “true” : “false”  ﻿
0 ? “true” : “false”  ﻿
“false” ? “true” : “false”  ﻿
“”  ? “true” : “false”  ﻿
[]  ? “true” : “false”  ﻿
Answer –

In Ruby, the only values that evaluate to false are false and nil. Everything else – even zero (0) and an empty array ([]) – evaluates to true.

This comes as a real surprise to programmers who have previously been working in other languages like JavaScript.


|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


28.  

 What will val1 and val2 equal after the code below is executed? Explain your answer.

Answer –

Although these two statements might appear to be equivalent, they are not, due to the order of operations. Specifically, the and and or operators have lower precedence than the = operator, whereas the && and || operators have higher precedence than the = operator, based on order of operations.

To help clarify this, here’s the same code, but employing parentheses to clarify the default order of operations:

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||









