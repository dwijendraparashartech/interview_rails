ruby_and_rubyonrails_features.txt ::::::::::::

Ruby on Rails differences and features ::

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Ruby Def ::
Ruby is an interpreted, high-level, general-purpose programming language which supports multiple programming paradigms. In Ruby, everything is an object, including primitive data types.Ruby is dynamically typed and uses garbage collection and just-in-time compilation. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. 

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Ruby on Rails Def ::
Ruby on Rails (simplified as Rails) is a server-side web application framework written in Ruby under the MIT License. Rails is a model–view–controller (MVC) framework, providing default structures for a database, a web service, and web pages. It encourages and facilitates the use of web standards such as JSON or XML for data transfer and HTML, CSS and JavaScript for user interfacing. In addition to MVC, Rails emphasizes the use of other well-known software engineering patterns and paradigms, including convention over configuration (CoC), don't repeat yourself (DRY), and the active record pattern.[

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Ruby on Rails Features ::
Key Features ::
1.MVC Architecture
2.Active Record
3.Convention Over Configration
4.Simple Testing Tool
5.Automated Deployment
6.Simple Programming Language 

Other Features ::
Symbol garbage collector
Module #prepend
Keyword arguments
Action Mailer
Action view
Turbolinks
Action cable
Actionpack Assertions
Rails API
Render from anywhere
Rake command
Customized library
AJAX library

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Ruby Features ::
Object-oriented
Flexibility
Expressive feature
Mixins
Visual appearance
Dynamic typing and Duck typing
Exception handling
Garbage collector
Portable
Keywords
Statement delimiters
Variable constants
Naming conventions
Keyword arguments
Method names
Singleton methods
Missing method
Case Sensitive

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Advantages of Ruby Programming Language ::
1.Speed of Deployment
2.Lots of Libraries and Gems
3.Best Industry Standards
4.Budget Friendly

1. Open source and community support
2. Flexibility
3. Suitable for beginners
4. Web development and Desktop Applications
5. Command line programs
6. Cost Effective
7. Easy to manage Changes 
8. Secure
9. Performance
10.Flexibility
11.Productivity
12.Consistent
13.Large Community
14.A Large Repository of Free Plugins
15.Server Side Web Applications 
16. Creative Features
17. Ruby on Rails Architecture

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

DisAdvantages of Ruby Programming Language ::
1. Speed
1.1. Run Time Speed
1.2. Boot Speed
2. Complex syntax
3. Smaller community
4. Not suitable for everyone
5. Limited libraries and tools
6.Improper Documents
7.Fast Development but Slow Performance
8.The high cost of wrong decisions in the development
9.No Continuous evolvement
10.Performance Time

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Ruby Features ::
Object Oriented
Ruby is purely object oriented programming language. Each and every value is an object. Every object has a class and every class has a super class. Every code has their properties and actions. Ruby is influenced with Smalltalk language. Rules applying to objects applies to the entire Ruby.

Flexibility
Ruby is a flexible language as you can easily remove, redefine or add existing parts to it. It allows its users to freely alter its parts as they wish.

Mixins
Ruby has a feature of single inheritance only. Ruby has classes as well as modules. A module has methods but no instances. Instead, a module can be mixed into a class, which adds the method of that module to the class. It is similar to inheritance but much more flexible.
Play Video


Visual appearance
Ruby generally prefers English keyword and some punctuation is used to decorate Ruby. It doesn't need variable declaration.

Dynamic typing and Duck typing
Ruby is a dynamic programming language. Ruby programs are not compiled. All class, module and method definition are built by the code when it run.

Ruby variables are loosely typed language, which means any variable can hold any type of object. When a method is called on an object, Ruby only looks up at the name irrespective of the type of object. This is duck typing. It allows you to make classes that pretend to be other classes.

Variable constants
In Ruby, constants are not really constant. If an already initialized constant will be modified in a script, it will simply trigger a warning but will not halt your program.

Naming conventions
Ruby defines some naming conventions for its variable, method, constant and class.

Constant: Starts with a capital letter.
Global variable: Starts with a dollar sign ($).
Instance variable: Starts with a (@) sign.
Class variable: Starts with a (@@) sign.
Method name: Allowed to start with a capital letter.
Keyword arguments
Like Python, Ruby methods can also be defined using keyword arguments.

Method names
Methods are allowed to end with question mark (?) or exclamation mark (!). By convention, methods that answer questions end with question mark and methods that indicates that method can change the state of the object end with exclamation mark.

Singleton methods
Ruby singleton methods are per-object methods. They are only available on the object you defined it on.


Missing method
If a method is lost, Ruby calls the method_missing method with name of the lost method.

Statement delimiters
Multiple statements in a single line must contain semi colon in between but not at the end of a line.

Keywords
In Ruby there are approximately 42 keywords which can't be used for other purposes. They are called reserved words.

Case Sensitive
Ruby is a case-sensitive language. Lowercase letters and uppercase letters are different.



||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Advantages of Ruby Programming Language
If you’re interested in learning Ruby, many resources are available to help you get started. Given that it’s in use for many technologies, this language has many advantages. Some of them are listed as follows:

1. Open source and community support
One of the major advantages of Ruby on Rails is the community and support that comes with it. Because it is open source, a large community of developers is constantly working on improving and expanding the framework. This means that if you have any questions or need help with something, somebody has already figured it out and can help you. Additionally, because Ruby on Rails is so popular, many resources are available online and in print to help you learn how to use it.

2. Flexibility
Another advantage of Ruby on Rails is its flexibility. It is easy to change your code and see the results immediately. This can be a great advantage when you are starting and still trying to figure out how everything works. Because this language is based on conventions rather than configuration, it is typically much easier to set up and get going with than other frameworks.

3. Suitable for beginners
Ruby on Rails is a web development framework written in the Ruby programming language. It is designed to make developing web applications easier by making assumptions about what every developer needs to get started. It includes everything you need to build a web application, including a model–view–controller (MVC) architecture, templates, web services, and libraries for logging, session management, and testing.


Ruby on Rails eliminates much of the boilerplate code typically found in web applications. For example, Ruby on Rails includes built-in helper methods that automate common tasks such as form submission and input validation. This means that you can focus on writing the code specific to your application rather than writing a lot of code just to get the basic functionality up and running. The high-level nature is extremely beneficial for anyone just getting started with programming. You may also take a look at the advantages and disadvantages of high-level programming languages to know better.

4. Web development and Desktop Applications
Ruby is a popular choice for web development, thanks to its Rails framework. Rails provide scaffolding for web applications, making creating and maintaining complex websites easier. In addition to web applications, Ruby can also be used to create desktop applications. The Ruby GTK library allows you to create graphical user interfaces for your applications.

5. Command line programs
Ruby can be used to create command line programs. These are programs that are run from the terminal, and they can be very powerful and efficient. It provides excellent support for unit testing and test-driven development. This means that you can be confident that your command line program will work as expected and that any changes you make will not break existing functionality. You can also get help from the community, which is very active and helpful, so you can always find someone to help you with your project if you run into difficulties.

Disadvantages of Ruby Programming Language
Although Ruby has many advantages, there are also some disadvantages that you should be aware of. These include:

1. Speed
Ruby is not the fastest language out there. This can be a problem if you are working on a project that requires high performance. However, there are ways to improve the speed of Ruby programs, such as using a faster interpreter or Just-In-Time compilation. Additionally, many web applications do not need to be superfast, so the speed disadvantage may not be a big deal for you.


2. Complex syntax
The syntax is often cited as a disadvantage of Ruby on Rails, as it can be more complex than other web development frameworks. This can make it difficult for newcomers to learn and use the framework, and can also lead to errors and unexpected results. Furthermore, complex syntax can make code more difficult to read and understand, making debugging and maintenance more challenging.

3. Smaller community
Ruby has a smaller community than some other popular programming languages. This can be a disadvantage because there are fewer people to ask for help when you are stuck on a problem. Apart from that, there are fewer resources available for learning Ruby. However, the community is very active and helpful, so you can always find someone to help you with your project if you encounter difficulties.

4. Not suitable for everyone
Ruby may not be suitable for everyone. It is a very flexible language, which can be both good and bad. It is not always clear how to structure Ruby code, making it difficult to read and maintain. And, because Ruby is so flexible, there are often multiple ways to accomplish the same thing, making it hard to know which the best way is. If you are uncomfortable with this type of flexibility, then Ruby may not be the right language for you.

5. Limited libraries and tools
Ruby has a limited number of libraries and tools compared to some other languages. This can be a problem if you need to use a specific library or tool for your project. However, the Ruby community is very active and helpful, so you can always find someone to help you with your project if you run into difficulties. Additionally, there are often multiple ways to accomplish the same thing in Ruby, so you may be able to find a different way to do what you need without using a specific library or tool.


