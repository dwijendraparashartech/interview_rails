short_interview_questions.txt ::::

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

1.What is Delegate method ?
Delegate defined as a Ruby class method used to easily expose contained objects' public methods as your own. 

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

2.What is Single tone method ::

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

3.What is third party library::

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

4.What is metaclass or eigen class or singleton class::

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

5.What is Ajax::

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

6.What is delayed jobs::

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

7.What is the difference between cron job and Background job::

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

8.What is the diff between content_for and yield in Rails ?
with yield specifying where content goes, and content_for specifying what the actual content is.

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

9.What is the difference between dealyed Job and Sidekiq ::
1. Delayed Job also provides a way to configure max run time out of the box (Sidekiq does not). 
2. Sidekiq, on the other hand, provides support for Middleware to update job metadata, skip queuing a job, or execute a job. 
3. Sidekiq supports more callbacks, though some hooks are available for Delayed Job apps.
4. Instead of callbacks, you can use Delayed Job with Active Job (namely, the before_enqueue and around_perform callbacks inbuilt into Rails).
5.Sidekiq gives better UI
Web UI is another feature that comes out of the box with Sidekiq. This provides historical statistics about jobs and information about workers, currently enqueued and dead jobs. You can perform operations like deleting or running jobs immediately without going through the console.
6.Delayed Job does not have an inbuilt Web UI, but delayed_job_web gives access to a basic Web UI with similar features to Sidekiq's.
Deployment
Both Delayed Job and Sidekiq have a similar deployment strategy for workers. Using Heroku, you just need to add entries inside your Procfile to start the job processor and run the workers.
For Sidekiq:  worker: bundle exec sidekiq -t 25 -c ${SIDEKIQ_CONCURRENCY:-5} [-q name,priority [-q another_queue,another_priority]]
For Delayed Job:  worker: [QUEUE=x,y,z] bundle exec rails jobs:work



10. What is the better delayed job or sidekiq ?
Sidekiq is better 
performance-wise, Sidekiq beats Delayed Job quite convincingly.
If performance and long-term maintainability are of importance, Sidekiq is a no-brainer. On the other hand, if running costs are a concern, Delayed Job can help you there.


11. How to Implement Sidekiq in Rails ??
How to Implement Sidekiq :: A Small description for Interview ::::::::::::::
Step01::  Add sidekiq to your Gemfile:  gem 'sidekiq' + bundle 
Step02::  Create the Worker File 
Step03::  Create a job to be processed asynchronously
Step04::  Start sidekiq from the root of your Rails application so the jobs will be processed


11. What is Delayed Job,Tell in Detail?
This gem is best when you need to extract some longer running actions (e.g. sending newsletters to large number of users) into a background task.You can reuse methods from your models and you can create complex classes for all your background task needs.With delayed_jobs even progress bars are possible in RubyOnRais.
Delayed Job, also known as DJ, makes it easy to add background tasks to your Rails applications on Heroku. You can also use Resque and many other popular background queueing libraries. Delayed Job uses your database as a queue to process background jobs.


12.What is Sidekiq ?
Simple, efficient background processing for Ruby. Sidekiq uses threads to handle many jobs at the same time in the same process. It does not require Rails but will integrate tightly with Rails to make background processing dead simple.

12.1.How to implement Delated Job in Rails?
1.Add gem to gemfile:delayed_job,delayed_job_active_record,delayed_job_mongoid
2.Generate job run script files - /bin/delayed_job
3.Create table to store the job with migration + rake db:migrate
4.Set the queue adaper in config/application.rb
5.Set up delayed job config in your config/initializers/delayed_job_config.rb
6.Replace script/delayed_job with bin/delayed_job
7.Add task to run in the background.


12.2.How to implement Delayed Job in Rails ?
1. Add gem to the Gemfile + bundle - “delayed_job”,‘delayed_job_active_record’,‘delayed_job_mongoid’

2. Generate related file for Job Run :  $ rails g delayed_job:active_record , 
adds following files :
A. /bin/delayed_job  - this script to run the jobs are in queue
B. Migration file to create a table to store the job with other information such as priority, attempts, handler, last_error, run_at, locked_at, failed_at, locked_by, queue.

3. rails db:migrate
4. Set the queue_adapter in config/application.rb
config.active_job.queue_adapter = :delayed_job
5. If you are using the protected_attributes gem, it must appear before delayed_job in your gemfile.
6. 
Setup Delayed::Job config in an initializer (config/initializers/delayed_job_config.rb)
Delayed::Worker.destroy_failed_jobs = false
Delayed::Worker.sleep_delay = 60
Delayed::Worker.max_attempts = 3
Delayed::Worker.max_run_time = 5.minutes
Delayed::Worker.read_ahead = 10
Delayed::Worker.default_queue_name = ‘default’
Delayed::Worker.delay_jobs = !Rails.env.test?
Delayed::Worker.raise_signal_exceptions = :term
Delayed::Worker.logger = Logger.new(File.join(Rails.root, ‘log’, ‘delayed_job.log’))

7. Replace script/delayed_job with bin/delayed_job
Start up the jobs process
There are two ways to do this.

If application is in development mode, we would use the below rake task instead.
rake jobs:work
If application is in production mode, then it is preferred to use the “delayed_job” script. This demonizes the job process and allows multiple background processes to be spawned.

8.Add task to run in background
In Controller just call .delay.method(params) on any object and it will be processed in the background.

15.What has to be run to squash multiple commits (last N) into a single commit?
Squashing multiple commits to a single one overwrites the history which is why it is recommended to be done using full caution. This step can be done by running the command: git rebase -i HEAD~{{N}} where {{N}} represents the number of commits needed to be squashed.

16.What Rails Engine do in Rails Application?
Essentially, it's a miniature Rails application that can be packaged and reused across multiple projects.
Rails engines provide a modular way to organize and reuse code in a Rails application. They allow you to encapsulate related functionality (such as authentication, payments, or notifications) in a separate namespace, with its own models, views, controllers, routes, and assets.

Rails engines are typically developed as separate gems that can be installed and managed using Bundler. This makes it easy to share engines across multiple projects or with the wider community.

Rails engines are a powerful tool for building modular and reusable code in a Rails application, and can help developers to build more maintainable and scalable applications. They are used extensively in the Rails ecosystem, and many popular gems (such as Devise, ActiveAdmin, and Spree) are implemented as engines.


